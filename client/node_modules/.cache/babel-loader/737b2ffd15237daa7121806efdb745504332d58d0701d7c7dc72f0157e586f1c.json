{"ast":null,"code":"var _jsxFileName = \"D:\\\\Claw Enterprises\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const token = Cookies.get('authToken'); // Use Cookies instead of localStorage\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      axios.get('/api/auth/me').then(response => {\n        setUser(response.data);\n      }).catch(() => {\n        Cookies.remove('authToken'); // Remove token if verification fails\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","Cookies","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","get","defaults","headers","common","then","response","data","catch","remove","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Claw Enterprises/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const token = Cookies.get('authToken'); // Use Cookies instead of localStorage\r\n    if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      axios\r\n        .get('/api/auth/me')\r\n        .then((response) => {\r\n          setUser(response.data);\r\n        })\r\n        .catch(() => {\r\n          Cookies.remove('authToken'); // Remove token if verification fails\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, setUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext, AuthProvider };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMW,KAAK,GAAGT,OAAO,CAACU,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,IAAID,KAAK,EAAE;MACTV,KAAK,CAACY,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUJ,KAAK,EAAE;MAClEV,KAAK,CACFW,GAAG,CAAC,cAAc,CAAC,CACnBI,IAAI,CAAEC,QAAQ,IAAK;QAClBP,OAAO,CAACO,QAAQ,CAACC,IAAI,CAAC;MACxB,CAAC,CAAC,CACDC,KAAK,CAAC,MAAM;QACXjB,OAAO,CAACkB,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;MAC/B,CAAC,CAAC;IACN;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEb,IAAI;MAAEC;IAAQ,CAAE;IAAAH,QAAA,EAC5CA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClB,EAAA,CAvBIF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAyBlB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}